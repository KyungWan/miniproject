{"remainingRequest":"/home/bitai/sw/Lecture/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/bitai/sw/Lecture/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/bitai/sw/Lecture/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bitai/sw/Lecture/frontend/src/components/Paginate.vue?vue&type=template&id=f9152db2&scoped=true&","dependencies":[{"path":"/home/bitai/sw/Lecture/frontend/src/components/Paginate.vue","mtime":1600652710123},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}