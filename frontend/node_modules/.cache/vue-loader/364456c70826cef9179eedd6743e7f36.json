{"remainingRequest":"/home/bitai/sw/Lecture/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bitai/sw/Lecture/frontend/src/components/Paginate.vue?vue&type=style&index=0&id=f9152db2&lang=css&scoped=true&","dependencies":[{"path":"/home/bitai/sw/Lecture/frontend/src/components/Paginate.vue","mtime":1600652710123},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bitai/sw/Lecture/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKYSB7CiAgY3Vyc29yOiBwb2ludGVyOwp9Cg=="},{"version":3,"sources":["Paginate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsPA;AACA;AACA","file":"Paginate.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <ul :class=\"containerClass\" v-if=\"!noLiSurround\">\n    <li v-if=\"firstLastButton\" :class=\"[pageClass, firstPageSelected() ? disabledClass : '']\">\n      <a @click=\"selectFirstPage()\" @keyup.enter=\"selectFirstPage()\" :class=\"pageLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\" v-html=\"firstButtonText\"></a>\n    </li>\n\n    <li v-if=\"!(firstPageSelected() && hidePrevNext)\" :class=\"[prevClass, firstPageSelected() ? disabledClass : '']\">\n      <a @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"prevLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\" v-html=\"prevText\"></a>\n    </li>\n\n    <li v-for=\"page in pages\" :class=\"[pageClass, page.selected ? activeClass : '', page.disabled ? disabledClass : '', page.breakView ? breakViewClass: '']\">\n      <a v-if=\"page.breakView\" :class=\"[pageLinkClass, breakViewLinkClass]\" tabindex=\"0\"><slot name=\"breakViewContent\">{{ breakViewText }}</slot></a>\n      <a v-else-if=\"page.disabled\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n      <a v-else @click=\"handlePageSelected(page.index + 1)\" @keyup.enter=\"handlePageSelected(page.index + 1)\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n    </li>\n\n    <li v-if=\"!(lastPageSelected() && hidePrevNext)\" :class=\"[nextClass, lastPageSelected() ? disabledClass : '']\">\n      <a @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"nextLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\" v-html=\"nextText\"></a>\n    </li>\n\n    <li v-if=\"firstLastButton\" :class=\"[pageClass, lastPageSelected() ? disabledClass : '']\">\n      <a @click=\"selectLastPage()\" @keyup.enter=\"selectLastPage()\" :class=\"pageLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\" v-html=\"lastButtonText\"></a>\n    </li>\n  </ul>\n\n  <div :class=\"containerClass\" v-else>\n    <a v-if=\"firstLastButton\" @click=\"selectFirstPage()\" @keyup.enter=\"selectFirstPage()\" :class=\"[pageLinkClass, firstPageSelected() ? disabledClass : '']\" tabindex=\"0\" v-html=\"firstButtonText\"></a>\n    <a v-if=\"!(firstPageSelected() && hidePrevNext)\" @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"[prevLinkClass, firstPageSelected() ? disabledClass : '']\" tabindex=\"0\" v-html=\"prevText\"></a>\n    <template v-for=\"page in pages\">\n      <a v-if=\"page.breakView\" :class=\"[pageLinkClass, breakViewLinkClass, page.disabled ? disabledClass : '']\" tabindex=\"0\"><slot name=\"breakViewContent\">{{ breakViewText }}</slot></a>\n      <a v-else-if=\"page.disabled\" :class=\"[pageLinkClass, page.selected ? activeClass : '', disabledClass]\" tabindex=\"0\">{{ page.content }}</a>\n      <a v-else @click=\"handlePageSelected(page.index + 1)\" @keyup.enter=\"handlePageSelected(page.index + 1)\" :class=\"[pageLinkClass, page.selected ? activeClass : '']\" tabindex=\"0\">{{ page.content }}</a>\n    </template>\n    <a v-if=\"!(lastPageSelected() && hidePrevNext)\" @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"[nextLinkClass, lastPageSelected() ? disabledClass : '']\" tabindex=\"0\" v-html=\"nextText\"></a>\n    <a v-if=\"firstLastButton\" @click=\"selectLastPage()\" @keyup.enter=\"selectLastPage()\" :class=\"[pageLinkClass, lastPageSelected() ? disabledClass : '']\" tabindex=\"0\" v-html=\"lastButtonText\"></a>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: {\n      type: Number\n    },\n    pageCount: {\n      type: Number,\n      required: true\n    },\n    forcePage: {\n      type: Number\n    },\n    clickHandler: {\n      type: Function,\n      default: () => { }\n    },\n    pageRange: {\n      type: Number,\n      default: 3\n    },\n    marginPages: {\n      type: Number,\n      default: 1\n    },\n    prevText: {\n      type: String,\n      default: 'Prev'\n    },\n    nextText: {\n      type: String,\n      default: 'Next'\n    },\n    breakViewText: {\n      type: String,\n      default: 'â€¦'\n    },\n    containerClass: {\n      type: String\n    },\n    pageClass: {\n      type: String\n    },\n    pageLinkClass: {\n      type: String\n    },\n    prevClass: {\n      type: String\n    },\n    prevLinkClass: {\n      type: String\n    },\n    nextClass: {\n      type: String\n    },\n    nextLinkClass: {\n      type: String\n    },\n    breakViewClass: {\n      type: String\n    },\n    breakViewLinkClass: {\n      type: String\n    },\n    activeClass: {\n      type: String,\n      default: 'active'\n    },\n    disabledClass: {\n      type: String,\n      default: 'disabled'\n    },\n    noLiSurround: {\n      type: Boolean,\n      default: false\n    },\n    firstLastButton: {\n      type: Boolean,\n      default: false\n    },\n    firstButtonText: {\n      type: String,\n      default: 'First'\n    },\n    lastButtonText: {\n      type: String,\n      default: 'Last'\n    },\n    hidePrevNext: {\n      type: Boolean,\n      default: false\n    }\n  },\n  beforeUpdate() {\n    if (this.forcePage === undefined) return\n    if (this.forcePage !== this.selected) {\n      this.selected = this.forcePage\n    }\n  },\n  computed: {\n    selected: {\n      get: function() {\n        return this.value || this.innerValue\n      },\n      set: function(newValue) {\n        this.innerValue = newValue\n      }\n    },\n    pages: function () {\n      let items = {}\n      if (this.pageCount <= this.pageRange) {\n        for (let index = 0; index < this.pageCount; index++) {\n          let page = {\n            index: index,\n            content: index + 1,\n            selected: index === (this.selected - 1)\n          }\n          items[index] = page\n        }\n      } else {\n        const halfPageRange = Math.floor(this.pageRange / 2)\n        let setPageItem = index => {\n          let page = {\n            index: index,\n            content: index + 1,\n            selected: index === (this.selected - 1)\n          }\n          items[index] = page\n        }\n        let setBreakView = index => {\n          let breakView = {\n            disabled: true,\n            breakView: true\n          }\n          items[index] = breakView\n        }\n        // 1st - loop thru low end of margin pages\n        for (let i = 0; i < this.marginPages; i++) {\n          setPageItem(i);\n        }\n        // 2nd - loop thru selected range\n        let selectedRangeLow = 0;\n        if (this.selected - halfPageRange > 0) {\n          selectedRangeLow = this.selected - 1 - halfPageRange;\n        }\n        let selectedRangeHigh = selectedRangeLow + this.pageRange - 1;\n        if (selectedRangeHigh >= this.pageCount) {\n          selectedRangeHigh = this.pageCount - 1;\n          selectedRangeLow = selectedRangeHigh - this.pageRange + 1;\n        }\n        for (let i = selectedRangeLow; i <= selectedRangeHigh && i <= this.pageCount - 1; i++) {\n          setPageItem(i);\n        }\n        // Check if there is breakView in the left of selected range\n        if (selectedRangeLow > this.marginPages) {\n          setBreakView(selectedRangeLow - 1)\n        }\n        // Check if there is breakView in the right of selected range\n        if (selectedRangeHigh + 1 < this.pageCount - this.marginPages) {\n          setBreakView(selectedRangeHigh + 1)\n        }\n        // 3rd - loop thru high end of margin pages\n        for (let i = this.pageCount - 1; i >= this.pageCount - this.marginPages; i--) {\n          setPageItem(i);\n        }\n      }\n      return items\n    }\n  },\n  data() {\n    return {\n      innerValue: 1,\n    }\n  },\n  methods: {\n    handlePageSelected(selected) {\n      if (this.selected === selected) return\n      this.innerValue = selected\n      this.$emit('input', selected)\n      this.clickHandler(selected)\n    },\n    prevPage() {\n      if (this.selected <= 1) return\n      this.handlePageSelected(this.selected - 1)\n    },\n    nextPage() {\n      if (this.selected >= this.pageCount) return\n      this.handlePageSelected(this.selected + 1)\n    },\n    firstPageSelected() {\n      return this.selected === 1\n    },\n    lastPageSelected() {\n      return (this.selected === this.pageCount) || (this.pageCount === 0)\n    },\n    selectFirstPage() {\n      if (this.selected <= 1) return\n      this.handlePageSelected(1)\n    },\n    selectLastPage() {\n      if (this.selected >= this.pageCount) return\n      this.handlePageSelected(this.pageCount)\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\na {\n  cursor: pointer;\n}\n</style>\n"]}]}